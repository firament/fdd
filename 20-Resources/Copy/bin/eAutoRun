#!/bin/bash

set -u;		# ON  - Abort script with error message if any VAR is not set
# set +u;	# OFF - Abort script with error message if any VAR is not set

# Ver 1.2	2014/05/10 16:40:03

# /10-Base/bin/eAutoRun
# 2014/05/10 16:39:40
# /home/oblak3/.local/share/applications/eAutoRun.desktop
#
# COMMAND IN DESKTOP FILE
# Exec=/bin/bash -c "/10-Base/bin/eAutoRun 2>&1 | tee ${AUTORUN_LOG}"

echo -n "STARTING script $0 - "; date +"%T [%a] %d %b %Y";
echo "Running as - ${USER}";
echo "Current Directory is : ${PWD}";
echo;

# AUTORN_SCRIPT_HOOK="odp-autorun";
# get paltform variable definitions
[[ ${PL_LOADED} -eq 1 ]] && source /10-Base/bin/PlatformVars.sh;
AUTORN_SCRIPT_LOCN="dummy-place-holder";		# value of the tag to be used
echo "AUTORUN_DONE_FLAGF = ${AUTORUN_DONE_FLAGF}";
echo "AUTORUN_LOG        = ${AUTORUN_LOG}";
echo "";


function doAutoRun(){
	# Write to log file
	putSection;
	## confirm script exists
	echo "Hooking into Auto Run Script, from GRUB entry";
	AUTORN_SCRIPT_LOCN=$(getTagValue "${AUTORN_SCRIPT_HOOK}")
	echo "AUTORN_SCRIPT_LOCN = '${AUTORN_SCRIPT_LOCN}'";
	[[ -a ${AUTORN_SCRIPT_LOCN} ]] && {
		echo "Executing AUTORUN SCRIPT now...";
		source ${AUTORN_SCRIPT_LOCN};
	} || echo "AUTORUN SCRIPT does not exist.";
	putLine;

## RESTART E19, to pickup configurations
	echo "Restarting E19 now.";
	# enlightenment_remote  -restart
	putLine;

	}

####################################################################################################
#	                   D U M P I N G   D E B U G G I N G   D A T A                                 #
#	                          Temporary code for root causing                                      #
####################################################################################################
function dumpDebugData(){

	putSection;
	echo "DUMPING DEBUG DATA - START";
	putSection;
	
	putLine;
	echo "Checking Files..."
	putLine;
	ls -l /etc/profile
	ls -l ${HOME}/.bash_profile
	ls -l ${HOME}/.bash_login
	ls -l ${HOME}/.profile
	echo ""

	putLine;
	echo "Dumping Variables..."
	putLine;
	echo "bash Special Parms '-' = ${-}";
#	echo "bash Special Parms '_' = ${_}";
	echo "bash Special Parms '$' = ${$}";
	echo "bash Special Parms '#' = ${#}";
	echo "bash Special Parms '@' = ${@}";
	echo "bash Special Parms '*' = ${*}";
#	echo "bash Special Parms '!' = ${!}";
	echo "USER = ${USER}";
	echo "EUID = ${EUID}";
	echo "PWD = ${PWD}";
	echo "HOSTNAME = ${HOSTNAME}";
	echo "SHLVL = ${SHLVL}";
	echo "SECONDS = ${SECONDS}";
	echo "TIMES are USER SYSTEM";
	times;
#	echo "BASH_ENV = ${BASH_ENV}";
#	echo "ENV = ${ENV}";
	echo ""

	putLine;
	echo "Printing 'ALIAS'"
	putLine;
	alias -p;
	echo ""

#	putLine;
#	echo "Printing 'ENVIRONMENT'"
#	putLine;
#	echo "of ${#environment[@]} elements";
#	echo ${environment[@]};	# this is an array, expand it
#	echo ""

	putLine;
	echo "Printing 'PRINTENV'"
	putLine;
	printenv | sort;
	putLine;
	echo ""
	
	putSection;
	echo "DUMPING DEBUG DATA - END";
	putSection;
	echo "";
	}


# Quit if First_Run_Flag is Set
	[[ -a ${AUTORUN_DONE_FLAGF} ]] && {
		echo "Script '$0' Has already been run. Skipping rerun";
	} || {
		echo "Setting Run flag now.";
		touch ${AUTORUN_DONE_FLAGF};
		dumpDebugData;
		doAutoRun;
	}



echo "";
putSection;
echo -n "COMPLETED running script $0 - "; date +"%T [%a] %d %b %Y";
putSection;
zenity --info --title="E17 Auto Run" --text="Completed Running AutoRun \n Log saved to '${AUTORUN_LOG}'" --timeout=90
# exit 0;
