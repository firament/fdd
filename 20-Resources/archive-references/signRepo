#!/bin/bash
# Last Update: Sat 2018-Mar-10 18:01:49 +05:30
# date +'%a %Y-%b-%d %T %:z'


# signRepositories V 1.2
################################################################################
# SET EACH TIME BEFORE SIGNING REPOSITORY                                      #
#------------------------------------------------------------------------------#
# readonly SETUP_ROOT_LOCN="/same/path/as/in/fdd-data.sh/";		# update to use base location
readonly SETUP_ROOT_LOCN="/same/path/as/in/fdd-data.sh/";		# update to use base location
readonly REPOSITORIES="deb-paks-Ax64 deb-paks-ubuntu-Yx64";


#------------------------------------------------------------------------------#
# Set each time before creating keys                                           #
#------------------------------------------------------------------------------#
readonly KEY_LOCN="${SETUP_ROOT_LOCN}/20-Resources/certs";
readonly KEY_PUB="Fdd-RepoSign-pub.key";
readonly KEY_PVT="Fdd-RepoSign-pvt.key";

#------------------------------------------------------------------------------#
# WRITE HEADER IN CONSOLE                                                      #
#------------------------------------------------------------------------------#
clear;
echo "Running script $0 @ $(date +'%T [%a] %d %b %Y')";

#------------------------------------------------------------------------------#
# PRIVATE VARIABLES NOT TO BE MODIFIED CASUALLY                                #
#------------------------------------------------------------------------------#
KEY_ID="";
KEY_OP="generated-key.txt"
PASS_PHRASE="fsap-infra-passphrase";
# TODO update with current cert
# gpg --fingerprint
# pub   rsa2048 2017-12-14 [SC]
#       3C1762638E3392A48BB006BB847C9C926C3C4D1D
# uid                      firament infra <infra@firament.com>
# sub   rsa2048 2017-12-14 [E]
CONTINUE_FLAG="";


################################################################################
#                                                                              #
#  SIGN ALL REPOSITORIES FOUND                                                 #
#                                                                              #
#------------------------------------------------------------------------------#
signRepositories(){

	### WARN USER OF NEED TO HAVE PRIVATE KEY FOR SUCCESSFUL SIGNING
	#------------------------------------------------------------------------------#
	echo ;
	echo "##### INSTALLED KEYS are: #####";
	echo "----------------------------------------------------------------------------------------------------";
	gpg --fingerprint
	echo "----------------------------------------------------------------------------------------------------";
	echo ;
	echo "If your PRIVATE KEY is not yet installed, install it now with this command";
	echo ;
	echo "gpg --allow-secret-key-import --import ${KEY_LOCN}/${KEY_PVT}";
	echo ;
	read -p "Press ENTER to continue or Ctrl+C to abort." CONTINUE_FLAG;

	pushd ${SETUP_ROOT_LOCN};
	echo ;
	echo "BEGIN - process all repositories.";
	for REPOSITORY in ${REPOSITORIES};
	do
		if [ ! -d ${REPOSITORY} ]; then	# SKIP IF BAD DESTINATION
			echo "----------------------------------------------------------------------------------------------------";
			echo;
			echo "${REPOSITORY} @ ${PWD}";
			echo "    Bad location. Does NOT exist";
			echo;
			echo "----------------------------------------------------------------------------------------------------";
			continue;
		fi;
		signRepository ${REPOSITORY};
	done
	echo "DONE - process all repositories.";
	echo ;
	popd; # return back to start locn
}

################################################################################
#                                                                              #
#  SIGN REPOSITORY USING EXISTING KEY                                          #
#                                                                              #
#------------------------------------------------------------------------------#
signRepository(){
	pushd $1;

	### GENERATE INDEX FILES
	#------------------------------------------------------------------------------#
	echo "";
	echo "Preparing Repository [$1] in [${PWD}] for signing.";
	echo "This will take a while, be patient...";

	# TODO check if dir exists

	# clean up any old files
	rm -fv Packages;
	rm -fv Packages.gz;
	rm -fv Contents;
	rm -fv Release;
	rm -fv Release.gpg;

	# Release Header, modify only if needed
cat > ./Release <<EOHEAD
Archive: ${1}
Origin: fsap-dev-local
Label: Local Repository for custom installs
Architecture: AMD64
EOHEAD

	# prepare the pre-reqs to signing
	echo "Creating Package index...";
	apt-ftparchive packages . >Packages;
	echo "Compressing Package Index";
	gzip -9c Packages         >Packages.gz;
	echo "Creating Contents Index...";
	apt-ftparchive contents . >Contents;
	echo "Creating Release File";
	apt-ftparchive release . >>Release;

	### SIGN REPOSITORY
	#------------------------------------------------------------------------------#
	echo -n "Signing Repository NOW... ";
	if [ -e Release.gpg ]; then rm -fv Release.gpg; fi;	# Remove old key to avoid overwrite prompt
	# [ -e Release.gpg ] && rm -fv Release.gpg;         # Alternate syntax
	echo "Use || ${PASS_PHRASE} ||";
	gpg --armor --detach-sign --output Release.gpg Release;

	# copy public key to repository for convenience
	cp -fv ${KEY_LOCN}/${KEY_PUB} .;

	echo "----------------------------------------------------------------------------------------------------";
	echo "SUCCESS";
	echo "Repository @ $1 is now signed.";
	echo "----------------------------------------------------------------------------------------------------";
	echo "Add the following line in /etc/apt/sources.list to enable and use this repository";
	echo "deb file:$1 /";
	echo "----------------------------------------------------------------------------------------------------";
	echo;

	popd;	# return back to start locn

}



################################################################################
#                                                                              #
#  CREATE AND EXPORT KEYS FOR SIGNING REPOSITORIES                             #
#                                                                              #
#------------------------------------------------------------------------------#
prepNexportCert(){

	#### GENERATE KEY - INTERACTIVE
	#------------------------------------------------------------------------------#
	gpg --gen-key | tee ${KEY_OP}

	#### IDENTIFY GENERATED KEY FROM OUTPUT
	#------------------------------------------------------------------------------#
	ARG_ARRAY=(`echo $(cat ${KEY_OP} | cut -s -d " " -f 1-)`);
	KEY_ID=${ARG_ARRAY[4]}

	echo "----------------------------------------------------------------------";
	echo "${KEY_ID} << Using this key";
	# gpg --list-keys;

	#### SAVE KEYS FOR LATER USE
	#------------------------------------------------------------------------------#
	# save public key to use for signing
	gpg --output ${KEY_LOCN}/${KEY_PUB} --armor --export ${KEY_ID}
	echo "public key exported to ${KEY_LOCN}/${KEY_PUB}";
	# save private key to use on other machines
	gpg --output ${KEY_LOCN}/${KEY_PVT} --armor --export-secret-key ${KEY_ID}
	echo "private key exported to ${KEY_LOCN}/${KEY_PVT}";

	#### INFORM USER OF IMPORT PROCESS
	#------------------------------------------------------------------------------#
	# import
	echo
	echo "To import Private key, run the following command from the terminal";
	echo "gpg --allow-secret-key-import --import ${KEY_LOCN}/${KEY_PVT}";
	echo
	echo "Modify \'${HOME}/.gnupg/gpg.conf\' to set your preferences.";
	echo;
}



################################################################################
#                                                                              #
#  INSTALL EXISTING KEY TO APT, TO RECOGNIZE SIGNED REPOSITORY                 #
#                                                                              #
#------------------------------------------------------------------------------#
instalCertInAPT(){
	sudo apt-key add ${KEY_LOCN}/${KEY_PUB};
}



################################################################################
#                                                                              #
#  EXECUTE APPROPIATE SECTIONS, AS NEEDED                                      #
#                                                                              #
#------------------------------------------------------------------------------#

# CHECK PATH IS GOOD

if [[ -z ${SETUP_ROOT_LOCN} || ! -d ${SETUP_ROOT_LOCN} ]]; then
	echo;
	echo "ERROR: Bad Path";
	echo "SETUP_ROOT_LOCN = '${SETUP_ROOT_LOCN}'";
	echo;
	echo "Ensure path is set correctly and try again";
	echo;
	exit 501;
fi;

#  CREATE AND EXPORT KEYS FOR SIGNING REPOSITORIES ----------------------------#
# prepNexportCert;	# to generate and save new certificate

#  INSTALL EXISTING KEY TO APT, TO RECOGNIZE SIGNED REPOSITORY ----------------#
# instalCertInAPT;	# Install certificate in APT, to recognize signature

#  SIGN REPOSITORY USING EXISTING KEY -----------------------------------------#
# signRepositories; 	# sign all repositories in location, using public key

#------------------------------------------------------------------------------#
echo "All work done @ $(date +'%T [%a] %d %b %Y')";

exit 0;
