#! bash


CONTAINER_ROOT="/media/sak/70_Current/Work/go-containers";
CONTAINER_TOOLS="go1_10-tools";
CONTAINER_PATH0="go1_10-path0";

## Part 1 - load and Initialize 'nbd' module ###################################
sudo modprobe nbd;

# Get first availaible node
getFirstFreeNBD(){
	let "LI_INDEX = 0";
	# TODO: ort the results, to ensure sequence
	ALL_ELEMS=$(lsblk | grep "nbd" | sed "s/nbd//g" | cut -d " " -f1);
	for ELEM in ${ALL_ELEMS}; do
		[[ ${LI_INDEX} != ${ELEM} ]] && break; ((LI_INDEX++));
	done;
	echo "/dev/nbd${LI_INDEX}";
	}


arrayExample(){
	echo "# arrayExample ----------------------------------------------------------------#";
	echo "#------------------------------------------------------------------------------#";

	return 200;

	echo "OPTION 1: "
	let "LI_COUNT = 0";
	# ALL_ELEMS=$(lsblk | grep "nbd" | sed "s/nbd//g" | cut -d " " -f1);
	ALL_ELEMS="0 1 2 3 4 5 6 7 8 9 10";
	ALL_ELEMS="0 1 2 3 4 5 6 7 8 9 10";
	for ELEM in ${ALL_ELEMS}; do
		echo "${LI_COUNT} =  ${ELEM}";
		[[ ${LI_COUNT} == ${ELEM} ]] && echo -n " TRUE" || echo -n "FALSE";
		echo -n " - ";
		[[ ${LI_COUNT} != ${ELEM} ]] && echo -n " TRUE" || echo -n "FALSE";
		# echo -n " - ";
		[[ ${LI_COUNT} != ${ELEM} ]] && break;
		echo;
		((LI_COUNT++));
	done;
	echo "${LI_COUNT} == element";
	echo "/dev/nbd${LI_COUNT}";
	echo "#------------------------------------------------------------------------------#";


	echo "OPTION 2: "
	let "LI_COUNT = 0";
	# ALL_ELEMS=$(lsblk | grep "nbd" | sed "s/nbd//g" | cut -d " " -f1);
	ALL_ELEMS=( 0 1 2 3 4 5 6 7 8 9 10 );
	echo "Array size: ${#ALL_ELEMS[*]}";
	echo "${LI_COUNT} == element";
	echo "/dev/nbd${LI_COUNT}";
	echo "#------------------------------------------------------------------------------#";




}

## Part 2 - Create and initialize disk #########################################
makeContainers(){
	RUN_AS="${USER}";

	return 500;	# To insure against accidental runs

	CONTAINER_LIST="${CONTAINER_TOOLS} ${CONTAINER_PATH0}";
	for LS_CONTAINER in ${CONTAINER_LIST}; do
		echo "Processing '${LS_CONTAINER}'";
		WORK_FILE_NAME="${CONTAINER_ROOT}/${LS_CONTAINER}.qc2";
		MOUNT_POINT="/40-Upgrades/${LS_CONTAINER}";
		mkdir -v -p ${MOUNT_POINT};

		NBD=$(getFirstFreeNBD);

		echo "NBD            = ${NBD}";
		echo "RUN_AS         = ${RUN_AS}";
		echo "LS_CONTAINER   = ${LS_CONTAINER}";
		echo "WORK_FILE_NAME = ${WORK_FILE_NAME}";
		echo "MOUNT_POINT    = ${MOUNT_POINT}";
		echo "#";

		qemu-img create -f qcow2 ${WORK_FILE_NAME} 2.5G
		sudo qemu-nbd -c ${NBD} ${WORK_FILE_NAME};
		sudo mke2fs -v -L ${LS_CONTAINER} -t ext4 ${NBD};
		sudo mount -v -t ext4 ${NBD} ${MOUNT_POINT};
		sudo chown -vR ${RUN_AS}:${RUN_AS} ${MOUNT_POINT};
#		sudo umount -v ${MOUNT_POINT};
		# mount -l;
		echo "#------------------------------------------------------------------------------#";
	done

	echo "Mount list:";
	mount -l;
	echo "#==============================================================================#";

	}

## Part 3 - Mount virtual disk for use #########################################
initGoContainers(){

# GOROOT .... = /10-Base/go
# GOPATH .... = /10-Base/go-package-lib
# TOOLSGOPATH = /10-Base/go-tools


	MOUNT_POINT="/10-Base/go-tools";
	LS_CONTAINER="${CONTAINER_TOOLS}";
	WORK_FILE_NAME="${CONTAINER_ROOT}/${LS_CONTAINER}.qc2";
	#
	NBD=$(getFirstFreeNBD);
	sudo qemu-nbd -c ${NBD} ${WORK_FILE_NAME};
	sudo mount -v -t ext4 ${NBD} ${MOUNT_POINT};

	MOUNT_POINT="/10-Base/go-package-lib";
	LS_CONTAINER="${CONTAINER_PATH0}";
	WORK_FILE_NAME="${CONTAINER_ROOT}/${LS_CONTAINER}.qc2";
	#
	NBD=$(getFirstFreeNBD);
	sudo qemu-nbd -c ${NBD} ${WORK_FILE_NAME};
	sudo mount -v -t ext4 ${NBD} ${MOUNT_POINT};

	}

## Part 4 - Cleanup after use (Release all nbd mounts) #########################
freeAllContainers(){
	echo "OPTION 1: "
	read -a BLOKDEVS <<<$(lsblk | grep nbd | cut -d " " -f1);
	for ((i=0; i<${#BLOKDEVS[@]}; i++));
	  do
		  echo "${i} == /dev/${BLOKDEVS[$i]}";
	    # sudo umount -v /dev/${BLOKDEVS[$i]};
	    # sudo qemu-nbd -d /dev/${BLOKDEVS[$i]};
	done;

	echo "OPTION 2: "
	ALL_ELEMS=$(lsblk | grep "nbd" | sed "s/nbd//g" | cut -d " " -f1);
	for ELEM in ${ALL_ELEMS}; do
		echo "${ELEM} - is mounted - /dev/nbd${ELEM}";
		sudo umount -v /dev/nbd${ELEM};
	    sudo qemu-nbd -d /dev/nbd${ELEM};
	done;

	}

## Part 5 - Shutdown and unload 'nbd' module ###################################
#	sudo rmmod -v nbd;

LOG_LOCN="${HOME}/Documents/init-go-logs";
mkdir -v -p ${LOG_LOCN};

# makeContainers     2>&1 | tee ${LOG_LOCN}/makeContainers-$(date +"%Y%m%d-%s").log;	# ONE TIME only
# initGoContainers   2>&1 | tee ${LOG_LOCN}/initGoContainers-$(date +"%Y%m%d-%s").log;
# freeAllContainers  2>&1 | tee ${LOG_LOCN}/freeAllContainers-$(date +"%Y%m%d-%s").log;
# freeAllContainers;
